name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - quick

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if version has changed
        run: |
          VERSION=$(grep '^version=' gradle.properties | cut -d '=' -f 2)
          echo "Current version: $VERSION"
          
          if gh run artifacts list | grep -q 'value-file'; then
            echo "Artifact exists"
            mkdir -p artifacts
            gh run artifacts download -n value-file -d artifacts
            LAST_VERSION=$(cat artifacts/value-file.txt)
          else
            LAST_VERSION=
          fi
          echo "Last known version: $LAST_VERSION"
          if [ "$VERSION" != "$LAST_VERSION" ]; then
            echo "Version has changed."
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
            gh run artifacts upload -n value-file -d artifacts
          else
            echo "Version has not changed."
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi
      - name: Setup JDK 17
        if: ${{ env.VERSION_CHANGED == 'true' }}
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: |
          echo "Starting Gradle build..."
          ./gradlew build
          echo "gradle build completed."

      - name: Extract version number from gradle.properties
        id: extract_version
        run: |
          VERSION=$(grep '^version=' gradle.properties | cut -d '=' -f 2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGENAME=template" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          ./gradlew test
          echo "Unit tests have completed"
          

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{env.IMAGENAME}}:${{env.VERSION}} .
          echo "Docker image has been built with version ${{env.VERSION}}."

      - name: Publish Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Publishing Docker image..."
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag ${{env.IMAGENAME}}:${{env.VERSION}}  ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGENAME}}:${{env.VERSION}}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGENAME}}:${{env.VERSION}}
          echo "Docker image has been published with version ${{env.VERSION}}."
          
